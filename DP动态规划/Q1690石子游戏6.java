package DP动态规划;

/**
 *1690. 石子游戏 VII
 * 石子游戏中，爱丽丝和鲍勃轮流进行自己的回合，爱丽丝先开始 。
 *
 * 有 n 块石子排成一排。每个玩家的回合中，可以从行中 移除 最左边的石头或最右边的石头，并获得与该行中剩余石头值之 和 相等的得分。当没有石头可移除时，得分较高者获胜。
 *
 * 鲍勃发现他总是输掉游戏（可怜的鲍勃，他总是输），所以他决定尽力 减小得分的差值 。爱丽丝的目标是最大限度地 扩大得分的差值 。
 *
 * 给你一个整数数组 stones ，其中 stones[i] 表示 从左边开始 的第 i 个石头的值，如果爱丽丝和鲍勃都 发挥出最佳水平 ，请返回他们 得分的差值 。
 *
 *
 *
 * 示例 1：
 *
 * 输入：stones = [5,3,1,4,2]
 * 输出：6
 * 解释：
 * - 爱丽丝移除 2 ，得分 5 + 3 + 1 + 4 = 13 。游戏情况：爱丽丝 = 13 ，鲍勃 = 0 ，石子 = [5,3,1,4] 。
 * - 鲍勃移除 5 ，得分 3 + 1 + 4 = 8 。游戏情况：爱丽丝 = 13 ，鲍勃 = 8 ，石子 = [3,1,4] 。
 * - 爱丽丝移除 3 ，得分 1 + 4 = 5 。游戏情况：爱丽丝 = 18 ，鲍勃 = 8 ，石子 = [1,4] 。
 * - 鲍勃移除 1 ，得分 4 。游戏情况：爱丽丝 = 18 ，鲍勃 = 12 ，石子 = [4] 。
 * - 爱丽丝移除 4 ，得分 0 。游戏情况：爱丽丝 = 18 ，鲍勃 = 12 ，石子 = [] 。
 * 得分的差值 18 - 12 = 6 。
 */
public class Q1690石子游戏6 {
    /**
     * 解法 【动态规划】
     * 无论是A想扩大与对手的的分差 还是B想要缩小与对手的得分差，目标都是要尽可能让自己得更多的分，即这次操作能够让自己和对方得分差距更大
     * 如果是A操作，最大得分差即： A 所收获的价值 - 下次B 比 A的得分差的最大值。如果是 B 操作，那么就是 B 所收获的价值 - 下次 A 比 B 得分差的最大值
     * dp[i][j] = Math.max(tempSum - stones[i] - dp[i + 1][j], tempSum - stones[j] - dp[i][j - 1]);
     * 由于需要计算累计和，可以采用前缀和的方法在O(1)的时间里算出任意两个index之间的和
     * @param stones
     * @return
     */
    public int stoneGameVII(int[] stones) {
        int n = stones.length;
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i ++){
            for (int j = 0; j < n; j ++){
                if (j == i + 1)
                    dp[i][j] = Math.max(stones[i], stones[j]);
            }
        }
        int[] sums = new int[n];
        int sum = 0;
        for (int i = 0; i < n; i ++){
            sum += stones[i];
            sums[i] = sum;
        }


        for (int i = n - 2; i >= 0; i --){
            for (int j = i + 2; j < n; j ++){
                int tempSum = sums[j] - sums[i] + stones[i];// 即区间[i,j]这些石子的和.有了这个和，可以轻松的计算出不带i或者不带j的和
                dp[i][j] = Math.max(tempSum - stones[i] - dp[i + 1][j], tempSum - stones[j] - dp[i][j - 1]);
            }
        }
        return dp[0][n - 1];
    }
}
